OUTPUT_DIR: ./mvit2_itodd_output
dataloader:
  evaluator: {_target_: detectron2.evaluation.COCOEvaluator, dataset_name: '${..test.dataset.names}'}
  test:
    _target_: detectron2.data.build_detection_test_loader
    dataset: {_target_: detectron2.data.get_detection_dataset_dicts, filter_empty: false, names: itodd_bop_test}
    mapper:
      _target_: detectron2.data.DatasetMapper
      augmentations:
      - {_target_: detectron2.data.transforms.ResizeShortestEdge, max_size: 1333, short_edge_length: 800}
      image_format: ${...train.mapper.image_format}
      is_train: false
    num_workers: 4
  train:
    _target_: detectron2.data.build_detection_train_loader
    dataset: {_target_: detectron2.data.get_detection_dataset_dicts, names: itodd_pbr_train}
    mapper:
      _target_: detectron2.data.DatasetMapper
      augmentations:
      - _target_: detectron2.data.transforms.RandomApply
        prob: 0.50000000
        tfm_or_aug:
          _target_: detectron2.data.transforms.AugmentationList
          augs:
          - _target_: detectron2.data.transforms.ResizeShortestEdge
            sample_style: choice
            short_edge_length: [400, 500, 600]
          - _target_: detectron2.data.transforms.RandomCrop
            crop_size: [384, 600]
            crop_type: absolute_range
      - _target_: detectron2.data.transforms.ResizeShortestEdge
        max_size: 1333
        sample_style: choice
        short_edge_length: [480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800]
      - {_target_: detectron2.data.transforms.RandomFlip, horizontal: true}
      image_format: RGB
      is_train: true
      use_instance_mask: true
    num_workers: 4
    total_batch_size: 4
lr_multiplier:
  _target_: detectron2.solver.WarmupParamScheduler
  scheduler:
    _target_: fvcore.common.param_scheduler.MultiStepParamScheduler
    milestones: [52500, 62500, 67500]
    values: [1.00000000, 0.10000000, 0.01000000]
  warmup_factor: 0.00100000
  warmup_length: 0.00370370
model:
  _target_: detectron2.modeling.GeneralizedRCNN
  backbone:
    _target_: detectron2.modeling.FPN
    bottom_up:
      _target_: detectron2.modeling.MViT
      depth: 16
      drop_path_rate: 0.20000000
      embed_dim: 96
      last_block_indexes: [0, 2, 13, 15]
      norm_layer: !!python/object/apply:functools.partial
        args: [&id001 !!python/name:torch.nn.modules.normalization.LayerNorm '']
        state: !!python/tuple
        - *id001
        - !!python/tuple []
        - {eps: 0.00000100}
        - null
      num_heads: 1
      out_features: [scale2, scale3, scale4, scale5]
      residual_pooling: true
    in_features: ${.bottom_up.out_features}
    out_channels: 256
    top_block: {_target_: detectron2.modeling.backbone.fpn.LastLevelMaxPool}
  input_format: RGB
  pixel_mean: [123.67500000, 116.28000000, 103.53000000]
  pixel_std: [58.39500000, 57.12000000, 57.37500000]
  proposal_generator:
    _target_: detectron2.modeling.proposal_generator.RPN
    anchor_generator:
      _target_: detectron2.modeling.anchor_generator.DefaultAnchorGenerator
      aspect_ratios: [0.50000000, 1.00000000, 2.00000000]
      offset: 0.00000000
      sizes:
      - [32]
      - [64]
      - [128]
      - [256]
      - [512]
      strides: [4, 8, 16, 32, 64]
    anchor_matcher:
      _target_: detectron2.modeling.matcher.Matcher
      allow_low_quality_matches: true
      labels: [0, -1, 1]
      thresholds: [0.30000000, 0.70000000]
    batch_size_per_image: 256
    box2box_transform:
      _target_: detectron2.modeling.box_regression.Box2BoxTransform
      weights: [1.00000000, 1.00000000, 1.00000000, 1.00000000]
    head:
      _target_: detectron2.modeling.proposal_generator.StandardRPNHead
      conv_dims: [-1, -1]
      in_channels: 256
      num_anchors: 3
    in_features: [p2, p3, p4, p5, p6]
    nms_thresh: 0.70000000
    positive_fraction: 0.50000000
    post_nms_topk: [1000, 1000]
    pre_nms_topk: [2000, 1000]
  roi_heads:
    _target_: detectron2.modeling.roi_heads.CascadeROIHeads
    batch_size_per_image: 512
    box_heads:
    - _target_: detectron2.modeling.roi_heads.FastRCNNConvFCHead
      conv_dims: [256, 256, 256, 256]
      conv_norm: !!python/name:detectron2._cfg_loader873e.cascade_mask_rcnn_mvitv2_t_3x.py.%3Clambda%3E ''
      fc_dims: [1024]
      input_shape: !!python/object:detectron2.layers.shape_spec.ShapeSpec {channels: 256, height: 7, stride: null, width: 7}
    - _target_: detectron2.modeling.roi_heads.FastRCNNConvFCHead
      conv_dims: [256, 256, 256, 256]
      conv_norm: !!python/name:detectron2._cfg_loader873e.cascade_mask_rcnn_mvitv2_t_3x.py.%3Clambda%3E ''
      fc_dims: [1024]
      input_shape: !!python/object:detectron2.layers.shape_spec.ShapeSpec {channels: 256, height: 7, stride: null, width: 7}
    - _target_: detectron2.modeling.roi_heads.FastRCNNConvFCHead
      conv_dims: [256, 256, 256, 256]
      conv_norm: !!python/name:detectron2._cfg_loader873e.cascade_mask_rcnn_mvitv2_t_3x.py.%3Clambda%3E ''
      fc_dims: [1024]
      input_shape: !!python/object:detectron2.layers.shape_spec.ShapeSpec {channels: 256, height: 7, stride: null, width: 7}
    box_in_features: [p2, p3, p4, p5]
    box_pooler:
      _target_: detectron2.modeling.poolers.ROIPooler
      output_size: 7
      pooler_type: ROIAlignV2
      sampling_ratio: 0
      scales: [0.25000000, 0.12500000, 0.06250000, 0.03125000]
    box_predictors:
    - _target_: detectron2.modeling.FastRCNNOutputLayers
      box2box_transform:
        _target_: detectron2.modeling.box_regression.Box2BoxTransform
        weights: [10, 10, 5, 5]
      cls_agnostic_bbox_reg: true
      input_shape: !!python/object:detectron2.layers.shape_spec.ShapeSpec {channels: 1024, height: null, stride: null, width: null}
      num_classes: ${...num_classes}
      test_score_thresh: 0.05000000
    - _target_: detectron2.modeling.FastRCNNOutputLayers
      box2box_transform:
        _target_: detectron2.modeling.box_regression.Box2BoxTransform
        weights: [20, 20, 10, 10]
      cls_agnostic_bbox_reg: true
      input_shape: !!python/object:detectron2.layers.shape_spec.ShapeSpec {channels: 1024, height: null, stride: null, width: null}
      num_classes: ${...num_classes}
      test_score_thresh: 0.05000000
    - _target_: detectron2.modeling.FastRCNNOutputLayers
      box2box_transform:
        _target_: detectron2.modeling.box_regression.Box2BoxTransform
        weights: [30, 30, 15, 15]
      cls_agnostic_bbox_reg: true
      input_shape: !!python/object:detectron2.layers.shape_spec.ShapeSpec {channels: 1024, height: null, stride: null, width: null}
      num_classes: ${...num_classes}
      test_score_thresh: 0.05000000
    mask_head:
      _target_: detectron2.modeling.roi_heads.MaskRCNNConvUpsampleHead
      conv_dims: [256, 256, 256, 256, 256]
      conv_norm: !!python/name:detectron2._cfg_loader873e.cascade_mask_rcnn_mvitv2_t_3x.py.%3Clambda%3E ''
      input_shape: !!python/object:detectron2.layers.shape_spec.ShapeSpec {channels: 256, height: 14, stride: null, width: 14}
      num_classes: ${..num_classes}
    mask_in_features: [p2, p3, p4, p5]
    mask_pooler:
      _target_: detectron2.modeling.poolers.ROIPooler
      output_size: 14
      pooler_type: ROIAlignV2
      sampling_ratio: 0
      scales: [0.25000000, 0.12500000, 0.06250000, 0.03125000]
    num_classes: 28
    positive_fraction: 0.25000000
    proposal_matchers:
    - _target_: detectron2.modeling.matcher.Matcher
      allow_low_quality_matches: false
      labels: [0, 1]
      thresholds: [0.50000000]
    - _target_: detectron2.modeling.matcher.Matcher
      allow_low_quality_matches: false
      labels: [0, 1]
      thresholds: [0.60000000]
    - _target_: detectron2.modeling.matcher.Matcher
      allow_low_quality_matches: false
      labels: [0, 1]
      thresholds: [0.70000000]
optimizer:
  _target_: torch.optim.AdamW
  betas: [0.90000000, 0.99900000]
  lr: 0.00016000
  params:
    _target_: detectron2.solver.get_default_optimizer_params
    base_lr: ${..lr}
    overrides:
      pos_embed: {weight_decay: 0.00000000}
      rel_pos_h: {weight_decay: 0.00000000}
      rel_pos_w: {weight_decay: 0.00000000}
    weight_decay_norm: 0.00000000
  weight_decay: 0.10000000
train:
  amp: {enabled: true}
  checkpointer: {max_to_keep: 100, period: 5000}
  ddp: {broadcast_buffers: false, find_unused_parameters: false, fp16_compression: true}
  device: cuda
  eval_period: 1000000
  init_checkpoint: mvit2_itodd_output/model_final.pth
  log_period: 20
  max_iter: 125000
  output_dir: ./mvit2_itodd_output
